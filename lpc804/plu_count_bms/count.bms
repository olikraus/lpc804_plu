#
# count.bms
#
# Implement a binary counter 00, 01, 10, 11 with reset
#
# LPC804 count example
#
# Inputs: c (count up), r (reset)
# Output: led0, led1
# 

name c
# assume low active buttons, so default is 1
input r 1
input c 1
# default output is 00
output led0 0
output led1 0

# normal c up
c00p c00n c- 
c00n c01p c+ | led0+
c01p c01n c- 
c01n c10p c+ | led0- led1+
c10p c10n c- 
c10n c11p c+ | led0+ led1+
c11p c11n c- 
c11n c00p c+ | led0- led1-

# reset behavior: from any state goto "rstp" or "rstn" state when the r button is pressed
# also handle the case, when c button is still pressed and additionally r is pressed ("rstn" state)
c00p rstp r- | led0- led1-
c00n rstn r- | led0- led1-
c01p rstp r- | led0- led1-
c01n rstn r- | led0- led1-
c10p rstp r- | led0- led1-
c10n rstn r- | led0- led1-
c11p rstp r- | led0- led1-
c11n rstn r- | led0- led1-

# go back to the first c state, if r button is released (goes up)
rstp c00p r+ | led0- led1-
rstn c00n r+ | led0- led1-

# as long as "r" is pressed, "c" will just jump between the two reset states
rstn rstp c+ | led0- led1-
rstp rstn c- | led0- led1-



